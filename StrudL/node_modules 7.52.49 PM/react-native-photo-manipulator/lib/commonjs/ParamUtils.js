"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toTextOptionsNative = exports.toImageNative = exports.toColorNative = exports.toBatchNative = void 0;
var _reactNative = require("react-native");
var _parseColor = _interopRequireDefault(require("parse-color"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Parameter Utilities Class
 */

/**
 * Convert color string to rgba object
 * @param color
 */
const toColorNative = color => {
  if (color !== undefined && typeof color !== 'string') {
    return color;
  }
  const result = (0, _parseColor.default)(color || '#000000').rgba;
  return {
    r: result[0],
    g: result[1],
    b: result[2],
    a: result[3] * 255
  };
};
exports.toColorNative = toColorNative;
const toImageNative = source => typeof source === 'string' ? source : _reactNative.Image.resolveAssetSource(source).uri;
exports.toImageNative = toImageNative;
const toTextOptionsNative = it => ({
  ...it,
  color: toColorNative(it.color),
  thickness: it.thickness || 0,
  rotation: it.rotation || 0,
  shadowRadius: it.shadowRadius || 0,
  shadowColor: it.shadowColor && toColorNative(it.shadowColor)
});
exports.toTextOptionsNative = toTextOptionsNative;
const toBatchNative = it => {
  if (it.operation === 'text') {
    return {
      ...it,
      options: toTextOptionsNative(it.options)
    };
  } else if (it.operation === 'overlay') {
    return {
      ...it,
      overlay: toImageNative(it.overlay)
    };
  } else if (it.operation === 'flip') {
    return {
      ...it
    };
  }
  return it;
};
exports.toBatchNative = toBatchNative;
//# sourceMappingURL=ParamUtils.js.map