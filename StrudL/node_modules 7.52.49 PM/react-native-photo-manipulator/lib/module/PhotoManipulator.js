import { NativeModules } from 'react-native';
import * as ParamUtils from './ParamUtils';
import { MimeType } from './PhotoManipulatorTypes';
import TurboModuleRNPhotoManipulator from './NativeRNPhotoManipulator';

// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.
// Currently, this is the recommended way to detect TurboModules.
// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs

// @ts-ignore
const isTurboModuleEnabled = global.__turboModuleProxy != null;
const RNPhotoManipulator = isTurboModuleEnabled ? TurboModuleRNPhotoManipulator : NativeModules.RNPhotoManipulator;
const PhotoManipulator = {
  batch: (image, operations, cropRegion, targetSize, quality = 100, mimeType = MimeType.JPEG) => {
    return RNPhotoManipulator.batch(ParamUtils.toImageNative(image), operations.map(ParamUtils.toBatchNative), cropRegion, targetSize, quality, mimeType);
  },
  crop: (image, cropRegion, targetSize, mimeType = MimeType.JPEG) => RNPhotoManipulator.crop(ParamUtils.toImageNative(image), cropRegion, targetSize, mimeType),
  flipImage: (image, mode, mimeType = MimeType.JPEG) => RNPhotoManipulator.flipImage(ParamUtils.toImageNative(image), mode, mimeType),
  rotateImage: (image, mode, mimeType = MimeType.JPEG) => RNPhotoManipulator.rotateImage(ParamUtils.toImageNative(image), mode, mimeType),
  overlayImage: (image, overlay, position, mimeType = MimeType.JPEG) => RNPhotoManipulator.overlayImage(ParamUtils.toImageNative(image), ParamUtils.toImageNative(overlay), position, mimeType),
  printText: (image, texts, mimeType = MimeType.JPEG) => RNPhotoManipulator.printText(ParamUtils.toImageNative(image), texts.map(ParamUtils.toTextOptionsNative), mimeType),
  optimize: (image, quality) => RNPhotoManipulator.optimize(ParamUtils.toImageNative(image), quality)
};
export default PhotoManipulator;
//# sourceMappingURL=PhotoManipulator.js.map